name: Weekly Screenshot (ForexFactory + Earnings)

on:
  # Single trigger, Mondays at 11:30 UTC
  schedule:
    - cron: "30 11 * * 1"
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: weekly-screenshot-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log current time
        run: |
          echo "UTC now:      $(date -u '+%Y-%m-%d %H:%M:%S %Z')"
          echo "New York now: $(TZ='America/New_York' date '+%Y-%m-%d %H:%M:%S %Z')"

      # Gate: only allow Monday between 07:30–08:59 ET
      - name: Proceed only if Monday 07:30–08:59 in New York
        run: |
          NY_DOW=$(TZ="America/New_York" date +'%u')   # 1=Mon
          NY_HOUR=$(TZ="America/New_York" date +'%H')
          NY_MIN=$(TZ="America/New_York" date +'%M')
          echo "NY time detected: DOW=${NY_DOW} ${NY_HOUR}:${NY_MIN}"
          if [ "$NY_DOW" != "1" ]; then
            echo "Not Monday — skipping."
            exit 0
          fi
          if [ "$NY_HOUR" -lt "07" ] || [ "$NY_HOUR" -gt "08" ]; then
            echo "Outside 07:30–08:59 ET; skipping."
            exit 0
          fi
          if [ "$NY_HOUR" = "07" ] && [ "$NY_MIN" -lt "30" ]; then
            echo "Before 07:30 ET; skipping."
            exit 0
          fi

      - name: Set date key
        id: datekey
        run: echo "DATE_UTC=$(date -u +%Y-%m-%d)" >> $GITHUB_ENV

      - name: Restore 'posted today' cache
        id: posted_cache
        uses: actions/cache/restore@v4
        with:
          path: .post-cache
          key: posted-${{ github.repository }}-${{ github.workflow }}-${{ env.DATE_UTC }}

      - name: Skip if we've already posted today
        if: steps.posted_cache.outputs.cache-hit == 'true'
        run: |
          echo "Already posted today (key: ${{ steps.posted_cache.outputs.cache-primary-key }}). Skipping."
          exit 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          echo "playwright" > requirements.txt
          pip install -r requirements.txt
          playwright install --with-deps chromium

      - name: Run screenshot script
        run: python screenshot_forexfactory.py

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./site

      - name: Mark posted today
        run: |
          mkdir -p .post-cache
          echo "posted $(date -u)" > .post-cache/posted.txt

      - name: Save 'posted today' cache
        uses: actions/cache/save@v4
        with:
          path: .post-cache
          key: posted-${{ github.repository }}-${{ github.workflow }}-${{ env.DATE_UTC }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deploy
        uses: actions/deploy-pages@v4

  notify-slack:
    needs: deploy
    runs-on: ubuntu-latest
    env:
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
    steps:
      - name: Post images to Slack (date-stamped URLs)
        run: |
          OWNER="${GITHUB_REPOSITORY%%/*}"
          REPO="${GITHUB_REPOSITORY##*/}"
          BASE_URL="https://${OWNER}.github.io/${REPO}"

          DATE_NY=$(TZ='America/New_York' date +%Y-%m-%d)
          EARN_URL="${BASE_URL}/pinned_tweet_${DATE_NY}.png"
          FF_URL="${BASE_URL}/forexfactory_full_${DATE_NY}.png"

          cat > payload.json <<'JSON'
          {
            "text": "Earnings and Economic Calendar for the week - For internal use only",
            "attachments": [
              { "title": "Earnings Calendar", "image_url": "__EARN_URL__" },
              { "title": "Economic Calendar (ForexFactory - This Week)", "image_url": "__FF_URL__" }
            ]
          }
          JSON

          sed -i "s|__EARN_URL__|${EARN_URL}|g" payload.json
          sed -i "s|__FF_URL__|${FF_URL}|g" payload.json

          curl -sS --max-time 20 -X POST -H 'Content-type: application/json' \
            --data @payload.json \
            "${SLACK_WEBHOOK}"
